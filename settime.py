#!/usr/bin/env python3
# Generated by usbrply
# cmd: /usr/bin/usbrply --wrapper --device-hi -p cleancap.pcapng

import binascii
import time
import usb1


def validate_read(expected, actual, msg):
    if expected != actual:
        print('Failed %s' % msg)
        print('  Expected; %s' % binascii.hexlify(expected,))
        print('  Actual:   %s' % binascii.hexlify(actual,))
        #raise Exception("failed validate: %s" % msg)


def replay(dev):
    def bulkRead(endpoint, length, timeout=None):
        return dev.bulkRead(endpoint, length, timeout=(1000 if timeout is None else timeout))

    def bulkWrite(endpoint, data, timeout=None):
        dev.bulkWrite(endpoint, data, timeout=(1000 if timeout is None else timeout))
    
    def controlRead(bRequestType, bRequest, wValue, wIndex, wLength,
                    timeout=None):
        return dev.controlRead(bRequestType, bRequest, wValue, wIndex, wLength,
                    timeout=(1000 if timeout is None else timeout))

    def controlWrite(bRequestType, bRequest, wValue, wIndex, data,
                     timeout=None):
        dev.controlWrite(bRequestType, bRequest, wValue, wIndex, data,
                     timeout=(1000 if timeout is None else timeout))

    def interruptRead(endpoint, size, timeout=None):
        return dev.interruptRead(endpoint, size,
                    timeout=(1000 if timeout is None else timeout))

    def interruptWrite(endpoint, data, timeout=None):
        dev.interruptWrite(endpoint, data, timeout=(1000 if timeout is None else timeout))

    # Generated by usbrply
    # Source: Linux pcap (usbmon)
    # cmd: /usr/bin/usbrply --wrapper --device-hi -p cleancap.pcapng
    # PCapGen device hi: selected device 21
    # Generated from packet 217/218
    interruptWrite(0x05, b"\x04\x9C\x04\x06\x30\x00\x00\x00\x00\x01\x09\x04\x00\x00\x00\xDC"
            b"\xFF\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x09\x02\x00\x04\x00\x14\x39\x50\x22\x06\x13"
            b"\x01\x24\x00\x3C\x00\x00\x1F\x00\x00\x00\x00\x00\x00\x00\x00\x00")


def open_dev(vid_want, pid_want, usbcontext=None):
    if usbcontext is None:
        usbcontext = usb1.USBContext()
    
    print("Scanning for devices...")
    for udev in usbcontext.getDeviceList(skip_on_error=True):
        vid = udev.getVendorID()
        pid = udev.getProductID()
        if (vid, pid) == (vid_want, pid_want):
            print("Found device")
            print("Bus %03i Device %03i: ID %04x:%04x" % (
                udev.getBusNumber(),
                udev.getDeviceAddress(),
                vid,
                pid))
            return udev.open()
    raise Exception("Failed to find a device")

def main():
    import argparse 

    vid_want = 0x320F
    pid_want = 0x5055
    parser = argparse.ArgumentParser(description="Replay captured USB packets")
    args = parser.parse_args()

    usbcontext = usb1.USBContext()
    dev = open_dev(vid_want, pid_want, usbcontext)

    #dev.detachKernelDriver(0)

    dev = open_dev(vid_want, pid_want, usbcontext)

    dev.claimInterface(0)
    dev.resetDevice()
    replay(dev)

    #dev.attachKernelDriver(0)

if __name__ == "__main__":
    main()

